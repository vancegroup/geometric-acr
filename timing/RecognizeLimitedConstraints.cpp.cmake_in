/**
	@file
	@brief Configurable/configured implementation of recognizer
	       with specific constraints turned on or off.

	       Configurable (.cmake_in) file generated by Lua script.

	       No matter how/where you see this file, DO NOT EDIT BY HAND!
	       Instead edit the Lua script, or the CMakeLists file.


	@date 2014

	@author
	Ryan Pavlik
	<rpavlik@iastate.edu> and <abiryan@ryand.net>
	http://academic.cleardefinition.com/
	Iowa State University Virtual Reality Applications Center
	Human-Computer Interaction Graduate Program
*/

//          Copyright Iowa State University 2014.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#define BF_EXPERIMENT

#include <RecognizeLimitedConstraints.h>

#include <boundary_features/RecognizeConstraints.h>
#include <boundary_features/BoundaryFeatures.h>
#include <boundary_features/detail/BinaryConstraintVisitor.h>

#cmakedefine BF_EXPERIMENT_CONDITION=BF_EXPERIMENT_CONDITION


// Built-in compile-time consistency check
#if BF_NUM_BITS != 6
#  error "CMake doesn't agree with lua/generated file on how many bits there are!"
#endif

#cmakedefine BF_EXPERIMENT_R0=BF_EXPERIMENT_R0
#cmakedefine BF_EXPERIMENT_R1=BF_EXPERIMENT_R1
#cmakedefine BF_EXPERIMENT_R2=BF_EXPERIMENT_R2
#cmakedefine BF_EXPERIMENT_R3=BF_EXPERIMENT_R3
#cmakedefine BF_EXPERIMENT_R4=BF_EXPERIMENT_R4
#cmakedefine BF_EXPERIMENT_R5=BF_EXPERIMENT_R5

#if BF_EXPERIMENT_R0
#include <boundary_features/detail/RecognizedPairs/CircleCylinder.h>
#endif
#define BF_EXPERIMENT_R0_SYMM 0
#define BF_EXPERIMENT_R0_ASYMM BF_EXPERIMENT_R0

#if BF_EXPERIMENT_R1
#include <boundary_features/detail/RecognizedPairs/CylinderCylinder.h>
#endif
#define BF_EXPERIMENT_R1_SYMM BF_EXPERIMENT_R1
#define BF_EXPERIMENT_R1_ASYMM 0

#if BF_EXPERIMENT_R2
#include <boundary_features/detail/RecognizedPairs/ConeCone.h>
#endif
#define BF_EXPERIMENT_R2_SYMM BF_EXPERIMENT_R2
#define BF_EXPERIMENT_R2_ASYMM 0

#if BF_EXPERIMENT_R3
#include <boundary_features/detail/RecognizedPairs/PlanePlane.h>
#endif
#define BF_EXPERIMENT_R3_SYMM BF_EXPERIMENT_R3
#define BF_EXPERIMENT_R3_ASYMM 0

#if BF_EXPERIMENT_R4
#include <boundary_features/detail/RecognizedPairs/SphereCylinder.h>
#endif
#define BF_EXPERIMENT_R4_SYMM 0
#define BF_EXPERIMENT_R4_ASYMM BF_EXPERIMENT_R4

#if BF_EXPERIMENT_R5
#include <boundary_features/detail/RecognizedPairs/SphereSphere.h>
#endif
#define BF_EXPERIMENT_R5_SYMM BF_EXPERIMENT_R5
#define BF_EXPERIMENT_R5_ASYMM 0


static const char * const names[] = {"CircleCylinder", "CylinderCylinder", "ConeCone", "PlanePlane", "SphereCylinder", "SphereSphere"};
const char * getName(size_t i) { return names[i]; }
size_t getExperimentCondition() { return BF_EXPERIMENT_CONDITION; }
size_t getNumSymmetric() { return BF_EXPERIMENT_R0_SYMM + BF_EXPERIMENT_R1_SYMM + BF_EXPERIMENT_R2_SYMM + BF_EXPERIMENT_R3_SYMM + BF_EXPERIMENT_R4_SYMM + BF_EXPERIMENT_R5_SYMM; }
size_t getNumAsymmetric() { return BF_EXPERIMENT_R0_ASYMM + BF_EXPERIMENT_R1_ASYMM + BF_EXPERIMENT_R2_ASYMM + BF_EXPERIMENT_R3_ASYMM + BF_EXPERIMENT_R4_ASYMM + BF_EXPERIMENT_R5_ASYMM; }
size_t getNumBits() { return 6; }
